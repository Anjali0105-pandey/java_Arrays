import java.util.* ;
import java.io.*; 
/*
//BRUTE FORCE APPROACH
//Time Complexity : O(n+d)
//Space Complexity : O(d)
class Solution {
	public static void leftRotateArray(int arr[],int n, int d){
        d=d%n;
        
        int temp[]=new int[d];
        for(int i=0;i<d;i++){
            temp[i]=arr[i];
        }
        for(int i=d;i<n;i++){
            arr[i-d]=arr[i];
        }
        for(int i=n-d;i<n;i++){
            arr[i]=temp[i-(n-d)];
        }
    }
	public static void main(String args[]) {
		
		// Write code here
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        int arr[]=new int[n];
        
		for(int i=0;i<n;i++)
            arr[i]=sc.nextInt();
            
        int d=sc.nextInt();
        
        leftRotateArray(arr,n,d);
        
        for(int i=0;i<n;i++){
            System.out.print(arr[i]+" ");
        }
	}
}
*/


class Solution {
    public static void reverseArray(int[] arr, int start, int end) {
        while(start<=end){
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }
        int k = sc.nextInt();
        k %= n;
        if (n == 0) {
            return;
        }
        if (k > n) {
            return;
        }
       // First k Element
        reverseArray(arr,0,k-1);  
        
      // From k to till last
        reverseArray(arr,k,n-1);
        
     // Complete
        reverseArray(arr,0,n-1);
        
        for (int i : arr) {
            System.out.print(i + " ");
        }
    }
}
