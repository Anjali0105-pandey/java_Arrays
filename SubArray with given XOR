//BETTER APPROACH
//TC : O(n^2)
//SC : O(1)
/*
public class Solution {
    public int solve(int[] A, int B) {
        int n=A.length;
        int xor,cnt=0;
        for(int i=0;i<n;i++){
            xor=0;
            for(int j=i;j<n;j++){
                xor=xor^A[j];
                if(xor==B)cnt++;
            }
        }
        return cnt;
    }
}
*/
public class Solution {
    public int solve(int[] A, int B) {
        int n =A.length;
        int xor=0;
        Map<Integer,Integer> map=new HashMap<>();
        map.put(xor,1);
        int cnt=0;
        for(int i=0;i<n;i++){
            xor=xor^A[i];
            int x=xor^B;
            if(map.containsKey(x))
                cnt+=map.get(x);
            if (map.containsKey(xor)) {
                map.put(xor, map.get(xor) + 1);
            } else {
                map.put(xor, 1);
            }
        }
        return cnt;
    }
}
