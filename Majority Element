import java.util.*;
/*
BRUTE FORCE
TC : O(N^2)
SC : O(1)

class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        int n=nums.length;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(nums[j]==nums[i])
                    count++;
            }
            if(count>(n/2))return nums[i];
        }
        return -1;
    }
}
*/

/*
BETTER APPROACH : USING HASHING
TC : O(NlogN)+O(N)
SC : O(N)

class Solution {
    public int majorityElement(int[] nums) {  
        int N= nums.length;
        //USING HASHING
        HashMap<Integer,Integer> map= new HashMap<>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                int count= map.get(nums[i])+1;
                if(count>N/2){
                    return nums[i];
                }
                else{
                    map.put(nums[i], count);
                }
            }
            else{
                map.put(nums[i],1);
            }
        }
        return -1;
    }
}
*/
/*
class Solution {
    public int majorityElement(int[] nums) {
        int count=0;
        int n=nums.length;
        Arrays.sort(nums);
        
        return nums[n/2];
    }
}*/


//OPTIMISED APPROACH - MOORE's VOTING ALGORITHM
//TC : O(N)
//SC : O(1)
class Solution {
    public int majorityElement(int[] nums) {
        int cnt=0,el=0;
        int n=nums.length;
        
        for(int i=0;i<n;i++){
            if(cnt==0){
                cnt=1;
                el=nums[i];
            }else if(nums[i]==el)
                cnt++;
            else
                cnt--;
        }
        int count=0;
        for(int i=0;i<n;i++){
            if(nums[i]==el)
                count++;
        }
        
        if(count>n/2)
            return el;
        return -1;
    }
}
