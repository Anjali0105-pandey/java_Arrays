/*
BRUTE FORCE : Merge Sort
TC : O(NlogN) SC : O(N)
*/
/*
BETTER APPROACH

Count all no of zeroes,ones and twos and put in the array manually.
TC : O(N)+O(N)
SC : O(1)

class Solution {
    public void sortColors(int[] nums) {
        int cnt0=0,cnt1=0,cnt2=0;
        int n=nums.length;
        for(int i=0;i<n;i++){
            if(nums[i]==0)cnt0++;
            else if(nums[i]==1)cnt1++;
            else if(nums[i]==2)cnt2++;
        }
        for(int i=0;i<cnt0;i++)
            nums[i]=0;
        for(int i=cnt0;i<cnt0+cnt1;i++)
            nums[i]=1;
        for(int i=cnt0+cnt1;i<n;i++)
            nums[i]=2;
    }
}
*/
/*
DUTCH NATIONAL FLAG ALGORITHM
Time complexity : O(N)
Space complexity : O(1)
low,mid at start and high pointer at end
When mid points to 0 
    swap values at index low and mid
    increment low and mid
when mid points to 1
    increment mid
when mid points to 2
    swap values at index mid and high
    decrement high
    
*/
class Solution {
    public void sortColors(int[] nums) {
        int low=0,mid=0;
        int high=nums.length-1;

        while(mid<=high){
            if(nums[mid]==0){
                int temp=nums[low];
                nums[low]=nums[mid];
                nums[mid]=temp;

                low++;
                mid++;
            }
            else if(nums[mid]==1){
                mid++;
            }
            else{
                int temp1=nums[mid];
                nums[mid]=nums[high];
                nums[high]=temp1;

                high--;
            }
        }
    }
}
